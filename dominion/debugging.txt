I chose to tackle a bug I found from the unit tests I wrote for assignment 2. The bug that I found was occuring in playCard(). I noticed that no matter how I ran the unit test On of the conditionals in playCard evaluated true, and returned with an error. This set off an assert in my unit test. After investigation I found the conditional was: ( card < adventurer || card > treasure_map ). This checks that the card that the player wants to play is an action card.

To investigate this I ran gdb and wanted to watch how the value of card changed during the running of the function. I noticed that when card is assigned to the return value of handCard() it was a value that did not make sense (i.e. not within the card enum). At this point, I realized that I may in fact be causing this problem.

When examining my unit test I realized that I was calling the playCard() function with incorrect arguments. I though that the first argument is the card you want to play, whereas it is actually the position in your hand that of the card that you want to play. This made sense, because that meant that handCard() would return junk because it was recieving an argmument pointing it to junk.

A few of Agan's principles applied to this process. His Rule #1 was important. I needed to gain a better understanding of the system before I was able to find the bug that I was in fact causing. I then used #2 and #3 once I started diving into the code to find the bug. Lastly, Rule #7 is what led me to find what was actually happening. Because I did not assume that my tests were perfect I was able to find that they were in fact breaking the code because of an issue I introduced when writing the tests.